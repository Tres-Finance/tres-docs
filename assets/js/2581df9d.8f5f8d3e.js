"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9804],{6939:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"Mutations/Admin/setPlatformSettings","title":"setPlatformSettings","description":"Description","source":"@site/docs/Mutations/Admin/setPlatformSettings.md","sourceDirName":"Mutations/Admin","slug":"/Mutations/Admin/setPlatformSettings","permalink":"/tres-docs/docs/Mutations/Admin/setPlatformSettings","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Mutations/Admin/setPlatformSettings.md","tags":[],"version":"current","frontMatter":{},"sidebar":"APIs","previous":{"title":"setOrganizationSettings","permalink":"/tres-docs/docs/Mutations/Admin/setOrganizationSettings"},"next":{"title":"setUserType","permalink":"/tres-docs/docs/Mutations/Admin/setUserType"}}');var r=n(4848),i=n(8453);const a={},l="setPlatformSettings",o={},d=[{value:"Description",id:"description",level:2},{value:"GraphQL Schema",id:"graphql-schema",level:2},{value:"Arguments",id:"arguments",level:2}];function c(t){const e={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"setplatformsettings",children:"setPlatformSettings"})}),"\n",(0,r.jsx)(e.h2,{id:"description",children:"Description"}),"\n",(0,r.jsx)(e.p,{children:"Sets platform settings for a specific internal account."}),"\n",(0,r.jsx)(e.h2,{id:"graphql-schema",children:"GraphQL Schema"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-graphql",children:"schema {\n  mutation: SetPlatformSettingsMutation\n}\n\nmutation {\n  setPlatformSettings(\n    aggregateAccruedRewards: Boolean\n    balanceRollupSettings: BalanceRollupSettingsInputType\n    internalAccountId: Int!\n    platform: Platform!\n  ): SetPlatformSettingsMutation\n}\n\ninput BalanceRollupSettingsInputType {\n  assetIdentifiers: [String] = null\n  interval: BalanceRollupInterval = DAILY\n}\n\nenum BalanceRollupInterval {\n  DAILY\n  WEEKLY\n  MONTHLY\n}\n\nenum Platform {\n  EOS\n  VANAR\n  ONTOLOGY\n  POLKADOT\n  # ... [other platform values]\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"arguments",children:"Arguments"}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Name"}),(0,r.jsx)(e.th,{children:"Type"}),(0,r.jsx)(e.th,{children:"Description"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"aggregateAccruedRewards"}),(0,r.jsx)(e.td,{children:"Boolean"}),(0,r.jsx)(e.td,{children:"Flag to determine if accrued rewards should be aggregated"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"balanceRollupSettings"}),(0,r.jsx)(e.td,{children:"BalanceRollupSettingsInputType"}),(0,r.jsx)(e.td,{children:"Settings for balance rollup configuration"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"internalAccountId"}),(0,r.jsx)(e.td,{children:"Int!"}),(0,r.jsx)(e.td,{children:"Required internal account identifier"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"platform"}),(0,r.jsx)(e.td,{children:"Platform!"}),(0,r.jsx)(e.td,{children:"Required platform identifier from the supported platforms enum"})]})]})]})]})}function u(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(c,{...t})}):c(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>a,x:()=>l});var s=n(6540);const r={},i=s.createContext(r);function a(t){const e=s.useContext(i);return s.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function l(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:a(t.components),s.createElement(i.Provider,{value:e},t.children)}}}]);